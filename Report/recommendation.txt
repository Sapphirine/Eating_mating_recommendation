### New User - Provide a series of ratings


```python
# Only show the first 10 records
test_ratings.filter(lambda r: r[0] == 9).map(lambda r: (r[0], r[1], r[2])).collect()[:10]
```




    [(9, 9213, 3.0),
     (9, 9487, 3.0),
     (9, 9513, 5.0),
     (9, 9659, 5.0),
     (9, 9754, 1.0),
     (9, 9811, 4.0),
     (9, 10252, 3.0),
     (9, 10345, 4.0),
     (9, 10376, 1.0),
     (9, 10641, 1.0)]



### Recommend the Eating Mates of the User


```python
evalEatingMateRecomd(9, test_ratings, trainModel)
```

    417526 82% [71885, 71912, 6359]
    549161 81% [71885, 6359, 78091]
     54383 79% [71885, 71912, 6359]
    607208 79% [8882, 6359, 81313]
      2617 78% [71885, 71912, 6359]
    480618 77% [8882, 71885, 71912]
    566543 77% [78091, 71885, 71912]
    611100 77% [71885, 71912, 6359]
    530940 76% [71885, 6359, 71912]
    673693 76% [71885, 71912, 6359]
    Time Cost: 33.87s
    MSE of User Vector: 1.17


### Friends list of User 9


```python
# Friends of User 9
friends = [2, 3, 466, 2141, 3587, 4043, 12840, 13866, 22447, 23636, 208888, 213233, 83682, 164654, 449598, 651072, 272274, 350958, 313860, 335183, 346899, 360696, 172400, 382269, 165575, 392534, 493566, 479112, 606539, 651724, 103245, 676122, 642526, 498303, 520182, 602193, 605821, 656609, 287720, 462134, 81991, 227902, 219928, 220376, 497194, 542947, 674672, 21094, 171797, 208358, 419478, 230047, 178452, 566913, 673854, 140296, 438499, 448999, 476155, 376394, 614785, 351478, 558378, 558666, 130302, 522346, 530471, 615818, 667789, 443120, 504583, 6751, 27953, 132705, 115644, 116184, 462175, 491307, 346313]
len(friends)
```




    79



### Count the similarity between user and his friends


```python
vu, err = getPredictedUserFeature(9, test_ratings, vBusiness)
sims = []
for fid in friends:
    if fid <= 1000: continue
    vf = getUserFeature(vUser, fid)
    dv = np.linalg.norm(vu-vf)
    sims.append( int(100 * getSimilarity(dv, vu)) )
print sims
```

    [32, 39, 58, 14, 56, 17, 13, 20, 0, 0, 5, 0, 28, 49, 19, 0, 47, 38, 0, 0, 29, 0, 0, 0, 11, 61, 0, 44, 0, 3, 11, 24, 11, 0, 0, 0, 0, 0, 8, 25, 5, 0, 0, 28, 20, 0, 18, 0, 0, 0, 36, 0, 0, 36, 0, 0, 0, 0, 16, 16, 17, 38, 0, 0, 48, 4, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0]



```python
hist = np.histogram(sims, np.arange(0, 110, 10))
hist
```




    (array([44, 11,  7,  7,  4,  2,  1,  0,  0,  0]),
     array([  0,  10,  20,  30,  40,  50,  60,  70,  80,  90, 100]))



### Histogram


```python
for i in range(10):
    print "%2d ~ %3d : %6.2f%%"%(i*10, (i+1)*10, 100*hist[0][i]/79)
```

     0 ~  10 :  55.00%
    10 ~  20 :  13.00%
    20 ~  30 :   8.00%
    30 ~  40 :   8.00%
    40 ~  50 :   5.00%
    50 ~  60 :   2.00%
    60 ~  70 :   1.00%
    70 ~  80 :   0.00%
    80 ~  90 :   0.00%
    90 ~ 100 :   0.00%

